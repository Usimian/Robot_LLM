---
description: A standalone client for a mecanum wheeled robot using an LLM + sensors for navigation.
globs:
alwaysApply: true
---

## Robot LLM System Development Rules

### üèóÔ∏è **Architecture**
- **System Type**: Client/Server ROS2 system
- **Client**: AMD64 Ubuntu 24.04 PC (Python/Tkinter/ROS2) - *This workspace*
- **Robot**: Jetson Orin Nano at 192.168.1.166 (SSH connection)
- **Hardware**: RGB camera, depth camera, IMU, lidar, mecanum wheel odometry
- **Simulation**: A gazebo sim environment may be used for developemnt and testing.

### üì° **Communication Rules**
- **Messaging**: ROS2 nodes and topics only (no HTTP/WebSockets)
- **Standard ROS2**: Use standard messages (`geometry_msgs/Twist` for cmd_vel)
- **Initiation**: All robot communications requested by client

### üîß **Development Standards**
- **Build**: ROS2 packages without `--symlink-install`
- **Data**: No simulated/mock/fallback data
- **Logging**: ROS2 `get_logger()` only (no print() or Python logging)
- **Testing**: Run only when explicitly requested
- **Processes**: Manual termination preferred (no automatic pkill)

### ‚ö° **Response Guidelines**
- **Terminal Commands**: Always check output for errors
- **Code Generation**: Succinct, address issues without extraneous code
- **Documentation**: No automatic .md files unless requested
- **Clarification**: Ask when requirements are ambiguous

### üö´ **Prohibited Actions**
- Modifying standard sensor message definitions (`sensor_msgs/LaserScan`, etc.)
- Creating simulated or mock data
- Using HTTP/WebSockets for communication
- Automatic process termination
- Fallback implementations

### ‚úÖ **Standard Practices**
- **Movement Control**: GUI publishes `geometry_msgs/Twist` to `/cmd_vel`
- **Sensor Data**: Subscribe to standard ROS2 topics (`/scan`, `/imu/data_raw`, etc.)
- **Integration**: Compatible with standard ROS2 navigation stack (nav2)